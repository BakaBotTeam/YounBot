# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Publish

on:
  push:
    branches:
      - master
    tags:
      - '*' # run on all tags being pushed

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtimeIdentifier:
          [
            win-x64,
            win-x86,
            linux-x64,
            linux-arm,
            linux-arm64,
            osx-x64,
            osx-arm64,
            linux-musl-x64,
            linux-musl-arm,
            linux-musl-arm64,
          ]

    steps:
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.1
      with:
        versionSpec: '6.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      shell: bash
      run: dotnet publish YounBot.csproj --no-self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=none -p:RuntimeIdentifier=${{ matrix.runtimeIdentifier }} --framework net8.0
    - name: Upload binary files(${{ matrix.runtimeIdentifier }}) for .NET 8.0
      uses: actions/upload-artifact@v4
      with:
        name: YounBot_${{ matrix.runtimeIdentifier }}_net8.0_NoSelfContained
        path: bin/Release/net8.0/${{ matrix.runtimeIdentifier }}/publish
  release:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install .NET 8.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
    - name: Generate release notes
      shell: bash
      run: |
        dotnet tool install --global dotnet-releaser
        dotnet-releaser changelog 
    - name: List all binary files
      run: mkdir artifacts
    - name: Download all binary files
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: List all binary files
      run: ls -R artifacts
    - name: Create release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: ${{ steps.Generate release notes.output }}
        draft: false
        prerelease: false
    - name: Create pre-release
      if: ${{ contains(github.ref, 'master') }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: latest
        release_name: Development Build
        body: ${{ steps.Generate release notes.output }}
        draft: false
        prerelease: true